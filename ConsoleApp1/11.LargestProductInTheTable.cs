public class LargestProductInTheTable
{
    private static int Solution()
    {
        string[][] numsTable = [
["16","53","21","04","27","73","41","84","06","15","46","89","75","46","54","23","77","11","48","02"],
["76","06","42","12","69","94","26","66","60","08","43","72","40","67","64","55","43","97","44","77"],
["24","67","50","46","71","00","02","11","31","09","13","66","45","77","55","45","42","47","52","16"],
["37","89","73","21","11","07","94","76","00","74","87","21","71","18","33","82","72","17","25","99"],
["13","73","57","45","33","33","12","39","84","66","76","43","22","53","58","33","96","65","75","43"],
["26","65","65","90","45","65","48","67","94","82","75","44","50","92","56","56","22","45","83","62"],
["34","98","58","73","30","36","31","27","54","24","80","91","48","91","04","29","61","21","85","77"],
["61","05","73","08","06","44","35","66","28","35","04","68","63","80","57","38","41","75","08","64"],
["24","75","55","46","54","14","10","70","51","37","84","84","49","66","71","06","10","00","87","18"],
["39","53","45","14","93","52","62","94","83","04","32","45","69","76","08","56","79","07","20","60"],
["56","06","73","92","35","36","64","03","85","79","08","28","52","22","98","95","22","68","36","91"],
["41","71","35","19","46","95","13","58","62","89","56","91","93","00","63","44","15","54","21","30"],
["48","87","99","94","46","57","53","81","78","59","92","52","69","04","72","28","88","33","35","60"],
["02","68","99","80","55","42","54","07","11","59","77","52","09","28","93","89","42","68","84","10"],
["45","73","99","85","43","15","01","14","58","73","37","64","66","30","62","93","92","95","64","28"],
["14","05","99","87","75","12","35","62","26","34","63","51","93","10","53","02","71","93","04","92"],
["57","08","45","20","66","71","06","22","99","12","60","57","29","12","34","15","86","17","62","93"],
["09","43","11","05","81","46","66","79","10","00","62","13","35","64","19","65","13","09","43","63"],
["57","93","01","01","74","16","77","92","72","56","23","32","41","75","29","93","71","23","40","67"],
["77","65","96","87","37","72","67","92","13","22","92","99","99","99","99","72","45","02","99","31"]
];
        int width = numsTable[0].Length;
        int height = numsTable.Length;

        int[][][] variants = [
            [[0,0], [1,0], [2,0], [3,0]],
            [[0,0], [1,1], [2,2], [3,3]],
            [[0,0], [0,1], [0,2], [0,3]],
            [[0,0], [1,-1], [2,-2], [3,-3]],
        ];

        int maxValue = 0;

        for (int line = 0; line < height; line++)
        {
            for (int row = 0; row < width; row++)
            {
                foreach (var variant in variants)
                {
                    int[][] variantPointer = [[], [], [], []];

                    bool isSkip = false;

                    for (int i = 0; i < 4; i++)
                    {
                        int linePointer = line + variant[i][0];

                        if (linePointer < 0 || linePointer > height - 1)
                        {
                            isSkip = true;
                            break;
                        }

                        int rowPointer = row + variant[i][1];

                        if (rowPointer < 0 || rowPointer > width - 1)
                        {
                            isSkip = true;
                            break;
                        }

                        variantPointer[i] = ([linePointer, rowPointer]);
                    }

                    if (isSkip)
                    {
                        continue;
                    }

                    int sum = 1;
                    string valueString = "";

                    foreach (var point in variantPointer)
                    {
                        string value = numsTable[point[0]][point[1]];
                        sum *= int.Parse(value);
                        valueString += value + ", ";
                    }

                    if (sum > maxValue)
                    {
                        maxValue = sum;
                    }
                }
            }
        }

        return maxValue;
    }

}